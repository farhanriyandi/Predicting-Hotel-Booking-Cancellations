# -*- coding: utf-8 -*-
"""Predicting-Hotel-Booking-Cancellations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16PpsSLGNvxpKXXzb82ZAVdtY3Urv6aWD

## Nama: Farhan Riyandi

## Email: farhanriyandi20@gmail.com

## ID Dicoding: farhan_riyandi_uyhY



Dataset ini diambil dari: https://www.kaggle.com/datasets/jessemostipak/hotel-booking-demand/data
"""

from google.colab import drive
drive.mount('/content/drive/')

!pip install jcopml

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

df = pd.read_csv('/content/drive/MyDrive/Machine Learning Terapan/hotel_bookings.csv')
df.head()

"""# Deskripsi Variabel"""

df.info()

"""Dari output terlihat bahwa:

Terdapat 12 kolom dengan tipe object, yaitu: hotel, arrival_date_month, meal, country, market_segment, distribution_channel, reserved_room_type assigned_room_type, customer_type, reservation_status, reservation_status_date. Kolom ini merupakan categorical features (fitur non-numerik).

Terdapat 4 kolom numerik dengan tipe data float64 yaitu: children, agent, company, adr.

Terdapat 16 kolom numerik dengan tipe data int64, yaitu: is_canceled, lead_time, arrival_date_year,
       arrival_date_week_number, arrival_date_day_of_month,
       stays_in_weekend_nights, stays_in_week_nights, adults, babies,
       is_repeated_guest, previous_cancellations,
       previous_bookings_not_canceled, booking_changes,
       days_in_waiting_list, required_car_parking_spaces,
       total_of_special_requests.

perlu diketahui is_canceled adalah target atau label dalam pelatihan model ini.
"""

df.describe()

df.isnull().sum()

"""Begitu banyak data yang missing value pada kolom company. dan Maka dari itu diputuskan untuk menghapus kedua fitur tersebut. teruntuk data country akan diisi oleh modus dan agent dan children akan diisi oleh median."""

df.drop(columns=['company', 'reservation_status'], inplace=True)
df.head()

"""# Menangani Missing value"""

# Mengisi missing value
df['country'] = df['country'].fillna(df['country'].mode().iloc[0])
df['agent'] = df['agent'].fillna(df['agent'].median())
df['children'] = df['children'].fillna(df['children'].median())
df.head()

# mengecek kembali missing value
df.isnull().sum()

df.select_dtypes(include=['object']).columns

df['is_canceled'].value_counts()

class_distribution = df['is_canceled'].value_counts(normalize=True) * 100

# Outputkan persentase setiap kelas
print(class_distribution)
sns.countplot(x='is_canceled', data=df)
plt.title('Countplot of Class Distribution')
plt.show()

"""# Data Preparation"""

from sklearn.preprocessing import LabelEncoder

# Pilih kolom dengan tipe data objek
obj_columns = df.select_dtypes(include=['object']).columns

# Gunakan LabelEncoder untuk setiap kolom objek
label_encoder = LabelEncoder()
for col in obj_columns:
    df[col] = label_encoder.fit_transform(df[col])

"""# Dataset Splitting"""

from sklearn.model_selection import train_test_split

X = df.drop(columns='is_canceled')
y = df.is_canceled

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)
X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""# Modeling"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from jcopml.tuning import grid_search_params as gsp
from sklearn.compose import ColumnTransformer

from jcopml.pipeline import num_pipe, cat_pipe
from jcopml.utils import save_model, load_model
from jcopml.plot import plot_missing_value
from jcopml.tuning.space import Integer, Real
from jcopml.feature_importance import mean_score_decrease
from sklearn.pipeline import Pipeline

"""### Random Forest"""

# parameter yang dituning
gsp.rf_params

pipeline = Pipeline([
    ('algo', RandomForestClassifier(n_jobs=-1, random_state=42))
])

model = GridSearchCV(pipeline, gsp.rf_params, cv=3, n_jobs=-1, verbose=1)
model.fit(X_train, y_train)

print(model.best_params_)
print(model.score(X_train, y_train), model.best_score_, model.score(X_test, y_test))

from jcopml.feature_importance import mean_score_decrease

df_imp = mean_score_decrease(X_train, y_train, model, plot=True, topk=10)

"""Phase 2"""

preprocessor = ColumnTransformer([
    ('numeric', num_pipe(), ["reservation_status_date", "arrival_date_week_number", "arrival_date_year"])
])

pipeline = Pipeline([
    ('prep', preprocessor),
    ('algo', RandomForestClassifier(n_jobs=-1, random_state=42))
])

model = GridSearchCV(pipeline, gsp.rf_params, cv=3, n_jobs=-1, verbose=1)
model.fit(X_train, y_train)

print(model.best_params_)
print(model.score(X_train, y_train), model.best_score_, model.score(X_test, y_test))